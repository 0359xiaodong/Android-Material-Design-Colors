apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion "21.0.1"

    defaultConfig {
        applicationId "at.wada811.android.material.design.colors.sample"
        minSdkVersion 8
        targetSdkVersion 21
        versionCode 2
        versionName "1.1.0"
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        if (variant.buildType.name.equals("release")) {
            variant.outputs.each { output ->
                if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
                    // Rename APK
                    def applicationId = defaultConfig.applicationId
                    def versionCode = defaultConfig.versionCode
                    def versionName = defaultConfig.versionName
                    def date = new java.text.SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date())
                    def newName = "${applicationId}_r${versionCode}_v${versionName}_${date}.apk"

                    def publish = project.tasks.create("publishAll")

                    // Move and Rename APK
                    def task = project.tasks.create("publish${variant.name.capitalize()}Apk", Copy)
                    task.from(output.outputFile)
                    task.rename(output.outputFile.name, newName)
                    task.into(file("${variant.name}/apk").getAbsolutePath())

                    task.dependsOn variant.assemble
                    publish.dependsOn task

                    // Move ProGuard
                    if (variant.buildType.runProguard) {
                        def copyTask = project.tasks.create("copy${variant.name.capitalize()}MappingText", Copy)
                        def buildTypeName = variant.buildType.name
                        copyTask.from(file("build/outputs/proguard/${buildTypeName}").path)
                        copyTask.into(file("${variant.name}/proguard").getAbsolutePath())

                        copyTask.dependsOn variant.assemble
                        task.dependsOn copyTask
                    }
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:21+'
    compile project(':library')
}


if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = new File(System.getenv('HOME'), storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}